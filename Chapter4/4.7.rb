# 4.7.1

# 配列[位置, 取得する長さ]
# 添え字を2つ使うと、氏江時の位置と取得する長さを指定できる
a = [1, 2, 3, 4]
a[1, 3] #=> [2, 3, 4]

# values_atメソッドを使うと、取得したい要素の添え字を複数指定できる
a = [1, 2, 3, 4, 5]
a.values_at(0, 2, 4) #=> [1, 3, 5]

# 「配列の長さ-1」を指定すれば、最後の要素を取得できる
a = [1, 2, 3]
a[a.size - 1] #=> 3
# 添え字に負の値を指定することもできる
a[-1]    #=> 3
a[-2]    #=> 2
a[-2, 2] #=> 2, 3
# lastメソッドで配列の最後の値を取得する
a.last #=> 3
# 引数に0以上の数値を渡すと最後のn個の要素を取得する
a.last(2) #=> [2, 3
# firstメソッドは配列の最初の値を取得する
a.first    #=> 1
a.first(2) #=> [1, 2]

# 4.7.2

# 値を変更する場合も負の添え字が使えるが、元の大きさを超える添え字を指定するとエラーする
a = [1, 2, 3]
a[-3] = -10 #=> [-10, 2, 3]

# 開始位置と長さを指定して要素を置き換えることもできる
a = [1, 2, 3, 4, 5]
# 2つめから3要素分を100で置き換える
a[1, 3] = 100
a #=> [1, 100, 5]

# <<だけでなく、pushメソッドを使っても要素を追加できる
a = []
a.push(1)    #=> [1]
a.push(2, 3) #=> [1, 2, 3]

# 指定した値に一致する要素を削除する場合はdeleteメソッドを使う
a = [1, 2, 3, 1, 2, 3]
# 値が2である要素を削除する(削除した値が戻り値)
a.delete(2) #=> 2
a           #=> [1, 3, 1, 3]
# 存在しない値を指定するとnilが返る
a.delete(5) #=> nil
a           #=> [1, 3, 1, 3]

# 4.7.3

# concatメソッド(破壊的メソッド)で配列を連結すると、元の配列が変更される
a = [1]
b = [2, 3]
a.concat(b) #=> [1, 2, 3]
a           #=> [1, 2, 3]
b           #=> [2, 3]

# +を使って配列を連結すると、新しい配列を作成するので、元の配列は変更されない
a = [1]
b = [2, 3]
a + b #=> [1, 2, 3]
a     #=> [1]
b     #=> [2, 3]

# 4.7.4

# |で配列の和集合を求めることができる
a = [1, 2, 3]
b = [3, 4, 5]
a | b #=> [1, 2, 3, 4, 5]

# -で配列の差集合をも止めることができる
a = [1, 2, 3]
b = [3, 4, 5]
a - b #=> [1, 2]

# &で配列の積集合を求めることができる
a = [1, 2, 3]
b = [3, 4, 5]
a & b #=> [3]

# Setクラスでより効率的に集合を扱うことができる
require 'set'
a = Set.new([1, 2, 3])
b = Set.new([3, 4, 5])
a | b #=> #<Set: (1, 2, 3, 4, 5)>
a - b #=> #<Set: (1, 2)>
a & b #=> #<Set: (3)>

# 4.7.5

# 多重代入では左辺の変数よりも右辺の個数が多い場合ははみ出した値が切り捨てられるが、
# 左辺の変数に*を付けると、残りの全要素を配列として受け取れる
e, *f = 100, 200, 300
e #=> 100
f #=> [200, 300]

# 4.7.6

# pushメソッドで配列を追加すると、２つの要素ではなく配列として追加される
a = []
b = [2, 3]
a.push(1) #=> [1]
a.push(b) #=> [1, [2, 3]]

# 配列を複数の引数として渡したい場合は、配列の前に*を置く(splat展開)
a = []
b = [2, 3]
a.push(1) #=> [1]
a.push(*b) #=> [1, 2, 3]

# 4.7.7

# pushメソッドのように、個数に制限のない引数のことを可変長引数という
# 自分で定義するメソッドで可変長引数を使う場合は、引数名の手前に*をつける
def greeting(*names)
  "#{names.join('と')}、こんにちは！"
end
greeting('田中さん')                       #=> "田中さん、こんにちは！"
greeting('田中さん', '鈴木さん')            #=> "田中さんと鈴木さん、こんにちは！"
greeting('田中さん', '鈴木さん', '佐藤さん') #=> "田中さんと鈴木さんと佐藤さん、こんにちは！"