# 2.8.1

# 文字列はすべてStringクラスのオブジェクトになる
# classメソッドはクラス名を呼び出すメソッド
'abc'.class #=> String

# 2.8.2

# 文字列は%記法で作ることもできる
# %記法はシングルクオートやダブルクオートをエスケープする必要がない

# %q! !はシングルクオートで囲んだことと同じ
puts %q!He said, "Don't speak."! #=> He said, "Don't speak."

# %Q! !はダブルクオートで囲んだことと同じになる(改行文字や式展開が使える)
something = "Hello."
puts %Q!He said, "#{something}"! #=> He said, "Hello."

# %! !もダブルクオートで囲んだことと同じになる
something = "Bye."
puts %!He said, "#{something}"! #=> He said, "Bye."

# ?を区切り文字として使う
puts %q?He said, "Don't speak."? #=> He said, "Don't speak."

# {}を区切り文字として使う
puts %q{He said, "Don't speak."} #=> He said, "Don't speak."

# 2.8.3

# 文字列は途中で改行できる
puts "Line 1,
Line 2"
#=> Line 1,
#   Line 2

# ヒアドキュメント(行指向文字列リテラル)のほうがすっきり書ける
a = <<TEXT
これはヒアドキュメントです。
複数行に渡る長い文字列を作成するのに便利です。
TEXT
puts a
#=> これはヒアドキュメントです。
#   複数行に渡る長い文字列を作成するのに便利です。

def some_method
  <<-TEXT
これはヒアドキュメントです。
<<-を使うと最後の識別子をインデントさせることができます。
  TEXT
end
puts some_method
#=> これはヒアドキュメントです。
#   <<-を使うと最後の識別子をインデントさせることができます。

def some_method
  <<~TEXT
    これはヒアドキュメントです。
    <<~を使うと内部文字列のインデント部分が無視されます。
  TEXT
end
puts some_method
#=> ここれはヒアドキュメントです。
#   <<~を使うと内部文字列のインデント部分が無視されます。

# ヒアドキュメントの中では式展開が有効
name = 'Alice'
a = <<TEXT
ようこそ、#{name}さん！
以下のメッセージをご覧ください。
TEXT
puts a
#=> ようこそ、Aliceさん！
#   以下のメッセージをご覧ください。

# 識別子をシングルクオートで囲むと式展開が無効になる
name = 'Alice'
a = <<'TEXT'
ようこそ、#{name}さん！
以下のメッセージをご覧ください。
TEXT
puts a
#=> ようこそ、#{name}さん！
#   以下のメッセージをご覧ください。

# ヒアドキュメントを直接引数として渡す
# prependは渡された文字列を先頭に追加するメソッド
a = 'Ruby'
a.prepend(<<TEXT)
Java
PHP
TEXT
puts a
#=> Java
#   PHP
#   TEXT

# ヒアドキュメントで作成した文字列に対して、直接メソッドを呼び出す
# upcaseは文字列をすべて大文字にするメソッド
b = <<TEXT.upcase
hello,
Good-bye.
TEXT
puts b
#=> HELLO,
#   GOOD-BYE.

# 2.8.4

# 少数第三位まで数字を表示する文字列を作成する
# sprintfメソッドで指定されたフォーマットの文字列を作成できる
sprintf('%0.3f', 1.2) #=> "1.200"

# "フォーマット文字列 % 表示したいオブジェクト"の形式でも同じ効果が得られる
'%0.3f' % 1.2         #=> "1.200"

# 表示したいオブジェクトを配列として複数渡すこともできる
sprintf('%0.3f' + '%0.3f', 1.2, 0.48) #=> "1.200 + 0.480"
'%0.3f + %0.3f' % [1.2, 0.48]         #=> "1.200 + 0.480"

# 2.8.5

# 数値を文字列に変換する
123.to_s #=> "123"

# 配列を連結して1つの文字列にする
[10, 20, 30].join #=> "102030"

# *演算子を使って文字列を繰り返す
'Hi!' * 10 #=> "Hi!Hi!Hi!Hi!Hi!Hi!Hi!Hi!Hi!Hi!"

# String.newを使って新しい文字列を作る(あまり使わない)
String.new('Hello') #=> "hello"

# 2.8.6

# Rubyには文字と文字列の違いはない
# あまり使われないが?を使って1文字だけの文字列を作ることもできる

?a #=> "a"