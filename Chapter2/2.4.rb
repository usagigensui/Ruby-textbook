# 数値には_を含めることができる
1_000_000_000 #=> 1000000000

# 四則演算ができる
10 + 20 #=> 30
100 - 25 #=> 75
12 * 5 #=> 60
20 / 5 #=> 4

# 変数の手前に-をつけると数値の正負を反転できる
n = 1
-n #=> -1

# 整数同士の割り算は整数で返される(小数点以下は切り捨て)
1 / 2 #=> 0
# 小数点以下が必要な場合はどちらかの値に少数点をつける
1.0 / 2 #=> 0.5
1 / 2.0 #=> 0.5

# 変数に整数が入っている場合はto_fメソッドで整数から少数に変更する
n = 1
n.to_f     #=> 1.0
n.to_f / 2 #=> 0.5

# %は割り算の余りを求める演算子
8 % 3 #=> 2

# **はべき乗を求める演算子
2 ** 3 #=> 8

# 2.4.1

# <、<=、>、>=を使って大小関係を比較する
1 < 2 #=> true
1 <= 2 #=> true
1 > 2 #=> false
1 >= 2 #=> false
1 == 2 #=> false
1 == 1 #=> true
1 != 2 #=> true

# 2.4.2

# 数学の四則演算と同様、*と/は+と-より優先順位が高い
2 * 3 + 4 * 5 - 6 / 2 #=> 23

# ()で優先順位を変えられる
2 * (3 + 4) * (5 - 6) / 2 #=> 7

# 2.4.3

# +=、-=、*=、/=、**=で変数の値を増減できる
n = 1
n += 1 #=> 2
n -= 1 #=> 1
n = 2
n *= 3 #=> 6
n /= 2 #=> 3
n **= 2 #=> 9

# Columm

# 少数を使う場合は丸め誤差に注意すること
0.1 * 3.0 #=> 0.30000000000000004
0.1 * 3.0 == 0.3 #=> false
# Rational(有理数)クラスを使うと少数ではなく「10分の3」という結果が返る
0.1r * 3.0r #=> (3/10)
0.1r * 3.0r == 0.3 #=> true
# 変数に値が入っている場合はrationalizeメソッドでRationalクラスの数値に変換できる
a = 0.1
b = 3.0
a.rationalize b.rationalize #=> (3/10)
# Rationalから普通の少数に戻すときはto_fメソッドで呼び出す
(0.1r * 3.0r).to_f #=> 0.3