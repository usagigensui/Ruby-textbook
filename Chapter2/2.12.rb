# 2.12.2

# Rubyには同じ効果で違う名前のメソッドがあることもある
# 例えばlecgthもsizeも同じ「文字数を返す」メソッド
'hello'.length #=> 5
'hello'.size   #=> 5
# 同じ実装で名前だけ異なるメソッドをエイリアスメソッドという

# 2.12.4

# nil、true、falseは擬似変数と呼ばれる特殊な変数
# 擬似変数は他にも複数存在する
# self:オブジェクト自身を指す
# __FILE__:現在のソースファイル名
# __LINE__:現在のソースファイルの行番号
# __EVCODING__:現在のソースファイルのスクリプトエンコーディング
# 擬似変数は変数のように見えるが、代入しようとするとエラーが起きる

# 2.15.5

# Rubyの変数にはオブジェクトそのものではなく、オブジェクトへの参照が格納される

# aとbはどちらも同じ文字列だが、オブジェクトとしては別物
a = 'hello'
b = 'hello'
a.object_id #=> 60
b.object_id #=> 80

# cにbを代入すると、どちらも同じオブジェクト
c = b
c.object_id #=> 80

# メソッドの引数にcを渡すと、引数として受け取ったdはb、cと同じオブジェクト
def m(d)
  d.object_id
end
m(c) #=> 80

# equal?メソッドを使って同じオブジェクトか確認できる(trueなら同じオブジェクト)
a.equal?(b) #=> false
b.equal?(c) #=> true

# 2.12.6

# Rubyでは数多くのライブラリが標準ライブラリとして用意されている
# とくに利用頻度が高いライブラリは組み込みライブラリとして提供されている
# 例えば日付を使うDateクラスは標準ライブラリだが組み込みライブラリではない
# 具体的なライブラリ名はネット上で確認できる
# 有志の開発者が作成している外部ライブラリをgemと呼ぶ

# 2.12.7

# require ライブラリ名 で組み込みライブラリでない標準ライブラリやgemを読み込む
# dateライブラリを読み込むとDateクラスを使えるようになる
require 'date'
puts Date.today #=> 2021-09-17

# 自分で作成したRubyプログラムを読み込む場合も同様で、その場合は相対パスまたは絶対パスで指定する
require './sample.rb' # 拡張子.rbは省略も可能

# 2.12.8

# reauireは1開始かライブラリを読み込めない
# 読込済みの場合はfalseが返ってくる
# その場合はloadを使うと、毎回無条件に指定したファイルを読み込む
load './sample.rb' # 拡張子.rbは省略できない

# 2.12.9

# reauireは実行ディレクトリかパスの起点になるが、
# require_relativeで自分のファイルが存在するディレクトリを起点として相対パスを書ける

# 2.12.10

# putsメソッドはコンソール上で改行を加えて変数の内容やメソッドの戻り値を返す
# putsメソッド自体の戻り値はnilになる
puts 123
123
=> nil

puts 'abc'
abc
=> nil

# printメソッドは改行を加えない
print 123
123=> nil

puts 'abc'
abc=> nil

# pメソッドはputsと同じく改行を加えるが、文字列を出力すると、その文字列をダブルクオートで囲んで返す
# pメソッド自体の戻り値は引数として渡されたオブジェクトになる
puts 123
123
=> 123

puts 'abc'
"abc"
=> "abc"

# 改行文字を含む文字列を渡すと、putsやprintメソッドはその位置で改行して出力される
# pメソッドは改行文字(\n)のまま出力される

# putsメソッドとprintメソッドが内部的に引数で渡された文字列にto_sメソッドを呼び出している
# pメソッドはinspectメソッドで文字列に変換している
# 文字列をinspectするとダブルクオート月の文字列で返す
'abc'.inspect #=> "\"abc\""